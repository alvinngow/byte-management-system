type Course {
    id: ID!
    name: String!
    subtitle: String
    description: String!
    descriptionPrivate: String
    defaultStartTime: Time!
    defaultEndTime: Time!
    coverImage: String!

    sessions(first: Int = 10, after: String): SessionConnection!
}

type CourseEdge {
    node: Course!
    cursor: String!
}

type CourseConnection {
    edges: [CourseEdge!]!
    pageInfo: PageInfo!
}

"""
Represents sorting options for Course
"""
enum CourseSortKey {
    NAME
    LOCATION_NAME
    START_DATE
    END_DATE
}

enum CourseDateFiltering {
    UPCOMING
    PAST
}

"""
Represents filtering options for Course
"""
input CourseFiltering {
    date: CourseDateFiltering
}

input CourseAddInput {
    clientMutationId: String
    courseName: String!
    courseDescription: String!
    courseDescriptionPrivate: String
    courseSubtitle: String
    courseCoverFilename: String
    courseDefaultStartTime: Time!
    courseDefaultEndTime: Time!
    locationName: String!
    locationAddress: String!
    locationDescription: String!
    locationLat: Float!
    locationLng: Float!
    locationClusterId: String
}

type CourseAddPayload {
    clientMutationId: String
    course: Course!
}

input CourseEditInput {
    clientMutationId: String
    courseId: ID!

    courseName: String!
    courseDescription: String!
    courseDescriptionPrivate: String
    courseSubtitle: String
    courseCoverFilename: String
    courseDefaultStartTime: Time!
    courseDefaultEndTime: Time!
    locationName: String!
    locationAddress: String!
    locationDescription: String!
    locationLat: Float!
    locationLng: Float!
    locationClusterId: String
}

type CourseEditPayload {
    clientMutationId: String

    course: Course!
}