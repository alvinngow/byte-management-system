type Session {
    id: ID!
    name: String!
    description: String!
    startDate: Date!
    endDate: Date!
    startTime: Time!
    endTime: Time!
    volunteerSlotAvailableCount: Int
    volunteerSlotCount: Int

    courseId: ID!
    course: Course!

    location: Location

    attendees(first: Int = 10, after: String, filter: SessionAttendeeFiltering, sortKey: SessionAttendeeSortKey, reverse: Boolean): SessionAttendeeConnection!
    selfAttendee: SessionAttendee
}

type SessionEdge {
    node: Session!
    cursor: String!
}

type SessionConnection {
    edges: [SessionEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

"""
Represents sorting options for Session
"""
enum SessionSortKey {
    START
    END
}

enum SessionDateFiltering {
    UPCOMING
    PAST
}

"""
Represents filtering options for Session
"""
input SessionFiltering {
    date: SessionDateFiltering
}

input SessionAddInput {
    clientMutationId: String
    courseId: ID!
    date: Date!
    startTime: Time!
    endTime: Time!
    volunteerSlotCount: Int
}

type SessionAddPayload {
    clientMutationId: String
    session: Session
}

input SessionEditInput {
    clientMutationId: String
    sessionId: ID!
    date: Date!
    startTime: Time!
    endTime: Time!
    volunteerSlotCount: Int
}

type SessionEditPayload {
    clientMutationId: String
    session: Session
}

input SessionDeleteInput {
    clientMutationId: String
    sessionId: ID!
}

type SessionDeletePayload {
    clientMutationId: String
    ok: Boolean
}