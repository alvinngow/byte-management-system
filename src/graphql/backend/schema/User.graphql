type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  mobileNo: String!
  avatar: String
  school: School
  role: UserRole
}

type CurrentUser {
  id: ID!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  mobileNo: String!
  avatar: String
  createdAt: DateTime!
  school: School
  role: UserRole!


  sessionAttendees(first: Int = 10, after: String, sortKey: SessionAttendeeSortKey, filter: SessionAttendeeFiltering, reverse: Boolean): SessionAttendeeConnection!
  overview: [CurrentUserOverview!]!
}

enum CurrentUserOverviewType {
  COURSES_UPCOMING
  COURSES_ATTENDED
  HOURS_ACCUMULATED
  COURSES_CANCELLED
}

type CurrentUserOverview {
  type: CurrentUserOverviewType!
  value: Float!
  change: Float
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  node: User!
  cursor: String!
}

input UserFiltering {
  role: [UserRole!]
  searchTerm: String
}