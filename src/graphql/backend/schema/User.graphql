type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  mobileNo: String!
  avatar: String
  school: School
  role: UserRole
  verified_at:DateTime
  approved_at:DateTime

  sessionAttendees(first: Int = 10, after: String, sortKey: SessionAttendeeSortKey, filter: SessionAttendeeFiltering, reverse: Boolean): SessionAttendeeConnection!
  overview: [UserOverview!]!
  notifyNewCourse:Boolean
  notifyNearNewCourse:Boolean
  nearRegion:String
  notifyUpcomingSessions: Boolean
  upcomingSessionTimeBefore: Int
}

type UserOverview {
  type: UserOverviewType!
  value: Float!
  change: Float
}

enum UserOverviewType {
  SESSIONS_UPCOMING
  SESSIONS_ATTENDED
  HOURS_ACCUMULATED
  SESSIONS_CANCELLED
}

enum UserSortKey{
  FIRST_NAME
  CONTACT_NUMBER
  SCHOOL
  USER_TYPE
}

type CurrentUser {
  id: ID!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  mobileNo: String!
  avatar: String
  createdAt: DateTime!
  school: School
  role: UserRole!
  notifyNewCourse:Boolean
  notifyNearNewCourse:Boolean
  nearRegion:String
  notifyUpcomingSessions: Boolean
  upcomingSessionTimeBefore: Int

  sessionAttendees(first: Int = 10, after: String, sortKey: SessionAttendeeSortKey, filter: SessionAttendeeFiltering, reverse: Boolean): SessionAttendeeConnection!
  overview: [CurrentUserOverview!]!
}

enum CurrentUserOverviewType {
  SESSIONS_UPCOMING
  SESSIONS_ATTENDED
  HOURS_ACCUMULATED
  SESSIONS_CANCELLED
}

type CurrentUserOverview {
  type: CurrentUserOverviewType!
  value: Float!
  change: Float
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  node: User!
  cursor: String!
}

input UserFiltering {
  role: [UserRole!]
  searchTerm: String
}

input UserEditInput {
  clientMutationId: String
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  mobileNo: String!
  schoolName: String
}

type UserEditPayload {
  clientMutationId: String
  User: User
}
input AccountApprovalUpdateInput{
  clientMutationId: String
  userId: ID!
}

type AccountApprovalUpdatePayload{
    clientMutationId: String
    user: User
}

input AccountVerifyUpdateInput{
  clientMutationId: String
  emailVerificationId: ID!
}

type AccountVerifyUpdatePayload{
  clientMutationId: String
  ok: Boolean!
}
input AccountNotificationUpdateInput{
  clientMutationId: String
  notifyNewCourse:Boolean
  notifyNearNewCourse:Boolean
  nearRegion:String
  notifyUpcomingSessions: Boolean
  upcomingSessionTimeBefore: Int
}

type AccountNotificationUpdatePayload{
  clientMutationId: String
  user:User!
}