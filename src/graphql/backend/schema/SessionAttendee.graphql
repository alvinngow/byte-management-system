type SessionAttendee {
    id: ID!
    sessionId: ID!
    session: Session!
    userId: ID!
    user: User!
    indicatedAttendance: Attendance!
    actualAttendance: Attendance
}

type SessionAttendeeEdge {
    node: SessionAttendee!
    cursor: String!
}

type SessionAttendeeConnection {
    edges: [SessionAttendeeEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

"""
Represents sorting options for SessionAttendee
"""
enum SessionAttendeeSortKey {
    SESSION_START
    SESSION_END
    FIRST_NAME
}

enum SessionAttendeeDateFiltering {
    UPCOMING
    PAST
}

"""
Represents filtering options for SessionAttendee
"""
input SessionAttendeeFiltering {
    searchText: String
    date: SessionAttendeeDateFiltering
    indicatedAttendance: Attendance
    actualAttendance: Attendance
}

input SessionAttendInput {
    clientMutationId: String
    sessionId: ID!
    indicatedAttendance: Attendance!
}

type SessionAttendPayload {
    clientMutationId: String
    sessionAttendee: SessionAttendee!
}

input SessionAttendReportInput {
    clientMutationId: String
    sessionId: ID!
    userId: ID!
    actualAttendance: Attendance
}

type SessionAttendReportPayload {
    clientMutationId: String
    sessionAttendee: SessionAttendee!
}